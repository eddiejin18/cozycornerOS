
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  boards   Board[]
  invitations Invitation[] @relation("InvitedUser")
  sentInvitations Invitation[] @relation("InvitingUser")
  collaboratedBoards Board[] @relation("BoardCollaborators")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Board {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  invitations Invitation[]
  collaborators User[]     @relation("BoardCollaborators")
}

model Invitation {
  id        String   @id @default(cuid())
  boardId   String
  invitedUserId String
  invitingUserId String
  status    String   @default("pending") // pending, accepted, declined
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board         Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  invitedUser   User  @relation("InvitedUser", fields: [invitedUserId], references: [id], onDelete: Cascade)
  invitingUser  User  @relation("InvitingUser", fields: [invitingUserId], references: [id], onDelete: Cascade)

  @@unique([boardId, invitedUserId])
}